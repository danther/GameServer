doctype html

html

  head
    title= title
    link(rel='stylesheet', href='/stylesheets/style.css')

    // JQUERY import
    script(type='text/javascript' src='http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js').

    // Main script to manage the client
    script(type='text/javascript').

      var idMatch = getUrlVars()["idMatch"];
      var idClient = getUrlVars()["idClient"];
      var tokenClient = getUrlVars()["tokenClient"];

      // Taken from internet. A function to parse URLs
      function getUrlVars() {
        var vars = [];
        var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {
          vars[key] = value;
        });
        return vars;
      }

      // The function/class to manage connection with the server is created once the page finish loading
      var socketFunction;
      $(document).ready(function () {
        socketFunction = new connect();
      });

      // Used by the reset button to reinitialize the environment. It deletes all previous data, so use with care.
      function reset() {
        socketFunction.closeConnection();
        $("#chatArea").val('');
        $("#chatInput").val('');
        logged = false;
        socketFunction = new connect();
        setTimeout(sendEcho, 500);
      }

      /**
       * Functions to send messages under our client protocol
       */

      var logged = false;
      // Ensure the format of login-type messages
      function sendLogin(option) {
        if (!logged){
          if (idMatch == undefined || idClient == undefined || tokenClient == undefined){
            writeMSG('system', 'Bad access to game server. Lobby url seems wrong.');
          } else {
            var msg_toSend = JSON.stringify({command: option, arg1: idMatch, arg2: idClient, arg3: tokenClient})
            socketFunction.sendMSG(msg_toSend);
            logged = true;
          }
        }else{
          writeMSG('system', 'If you want to log in again, use reset');
        }
        $("#chatInput").val('');
      }

      // Ensure the format of chat-type messages
      function sendChat(option) {
        if ($("#chatInput").val().length <= 1){
          writeMSG('system', 'Message too short');
        }else{
          var msg_toSend = JSON.stringify({command: option, arg1: $("#chatInput").val()})
          socketFunction.sendMSG(msg_toSend);
        }
        $("#chatInput").val('');
      }

      // Ensure the format of close-type messages
      function sendClose(option) {
        var msg_toSend = JSON.stringify({command: option})
        socketFunction.sendMSG(msg_toSend);
        $("#chatInput").val('');
      }

      // Ensure the format of echo-type messages
      function sendEcho() {
        var msg_toSend = JSON.stringify({command: 'echo'})
        socketFunction.sendMSG(msg_toSend);
      }

      function sendCardCommand(option) {
        var cardNum = $("#cardNumber option:selected").text();
        var msg_toSend = JSON.stringify({command: "play", arg1: option, arg2: cardNum})
        socketFunction.sendMSG(msg_toSend);
      }

      function sendMSGByType() {
        var option = $( "#chatOptions option:selected" ).text();

        option = option.toString().toLowerCase();

        switch (option){
          case "chat": sendChat(option); break;
          case "close": sendClose(option); break;
          default: sendCardCommand(option); break; // It should not be reached in any use situation.
        }
      }

      var hand;

      // Main function to manage connection with the server
      function connect(){
        var ws = new WebSocket("ws://game05dad.azurewebsites.net", 'playgame' );
        //var ws = new WebSocket("ws://localhost", 'playgame' );

        this.sendMSG = function (msg){
          ws.send(msg);
        }

        ws.onopen = function(){
          writeMSG('system', 'Conection established');

          sendLogin('login');
        };

        ws.onmessage = function (evt){
          var msgParsed = JSON.parse(evt.data);

          /**
           * Our protocol specifies that response messages include optionally a msgID field to
           *   associate the msg with a certain id.
           * When not specified, the client will take it as a "server" msg.
           */
          if (msgParsed.response == undefined){
            parseGameStates(msgParsed);
          }else if (msgParsed.msgID != undefined){
            writeMSG(msgParsed.msgID, msgParsed.response);
          }else{
            writeMSG('server', msgParsed.response);
          }
        };

        function parseGameStates(msgParsed){
          if (msgParsed.state != undefined && msgParsed.arg1 != undefined) {
            if (msgParsed.state.toLowerCase() == 'hand'){
              hand = msgParsed.arg1;
            }

            writeState(msgParsed.state, msgParsed.arg1);

          } else {
            writeMSG('system', 'Error on message');
          }
        }

        ws.onclose = function(){
          writeMSG('system', 'Connection closed');
        };

        // On reset, this deletes all listener before closing the connection
        this.closeConnection = function closeConnection(){
          ws.removeEventListener("open", ws.onopen);
          ws.removeEventListener("message", ws.onmessage);
          ws.removeEventListener("close", ws.onclose);
          ws.close();
        }
      }

      // This function is used transversely to write messages on the client's textArea
      function writeMSG(sender, text){
        $("#chatArea").val($("#chatArea").val() + sender + ' : ' + text + '\n');
      }

      function writeState(state, text){
        if (state.toLowerCase() == 'turn'){
          $("#gameState").val(state + ' : ' + text + '\n');
        } else {
          $("#gameState").val($("#gameState").val() + state + ' : ' + text + '\n');
        }
      }

body
  h1= title
  p Cliente web del juego

  #container.textbox

    textarea#chatArea(class='textArea' rows='12' cols='100' readonly style={resize: 'none'})
    br

    input#chatInput(type='textbox' style={width: '35em', clear: 'both', margin: '0em 1em'})

    select#chatOptions(style={clear: 'both', margin: '2em 1em'})
      - var optionsAvailable = ["Chat", "Close", "hop1Jug", "hop2Jug", "hop3Jug", "hop4Jug", "hop1Cont", "hop2Cont", "hop3Cont", "hop4Cont"];
      for item in optionsAvailable
        option(value= item) #{item}

    select#cardNumber(style={clear: 'both', margin: '2em 1em'})
      - var cardNumbers = ["1", "2", "3", "4", "5", "6", "7", "8"];
      for item in cardNumbers
        option(value= item) #{item}

    button#chatButton(type='button' style={clear: 'both', margin: '0em 1em'} onclick='sendMSGByType()') Send
    button#chatButton(type='button' style={clear: 'both', margin: '1em 1em'} onclick='reset()') Reset

    br
    br
    br
    label Game State
    br
    textarea#gameState(class='textArea' rows='30' cols='100' readonly style={resize: 'none'})